#!/usr/bin/env python3

import sys
import toml

import AssemblerOutput
import NCM


palette = {
    0xffffff: 1,
    0xA8A8A8: 2,
    0x545454: 3,
    0x000000: 4
}

if len(sys.argv) != 2:
    print("usage: ", sys.argv[0], " image charset.toml\n")
    sys.exit(1)

config = toml.load(sys.argv[1])


image_file = config["image"]
charset_file = config["output"]
char_width = config["char_width"]
char_height = config["char_height"]
symbol_prefix = config["symbol_prefix"]
widths = config["widths"]

if char_height % 8 != 0:
    print("char-height must be multiple of 8")
    sys.exit(1)

char_rows = char_height // 8

data = b""

image = NCM.NCM(image_file, palette, char_width, 8, 1)

for char_y in range(0, char_rows):
    for y in range(0, image.height // char_rows):
        for x in range(0, image.width):
            data += image.get(x, y * char_rows + char_y)

with open(charset_file, "w") as file:
    output = AssemblerOutput.AssemblerOutput("cc65", file)
    output.header(sys.argv[1])
    output.global_symbol(f"{symbol_prefix}_data")
    output.bytes(data)

    trim = []
    for index in range(0, image.width * (image.height // char_rows)):
        if index < len(widths):
            trim.append(16 - widths[index])
        else:
            trim.append(16 - char_width)
    output.global_symbol(f"{symbol_prefix}_trim")
    output.bytes(trim)
